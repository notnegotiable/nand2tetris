// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

	//zx and nx logic, zero and negate
	Mux16(a=x, b=false, sel=zx, out=x1);       //zero x?
	Not16(in=x1, out=notx);                   //create a neg version of x
	Mux16(a=x1, b=notx, sel=nx, out=x2);     //negate x?

	//zy and ny logic, same way as x version
	Mux16(a=y, b=false, sel=zy, out=y1);       
	Not16(in=y1, out=noty);                   
	Mux16(a=y1, b=noty, sel=ny, out=y2);     

	//f logic, add and and
	Add16(a=x2, b=y2, out=sumxy);              //create x+y
	And16(a=x2, b=y2, out=andxy);		  //create x&y	    
	Mux16(a=andxy, b=sumxy, sel=f, out=z);   //choose sum or and

	//no logic, negate output
	Not16(in=z, out=negout);                   //negate
	Mux16(a=z, b=negout, sel=no, out=out,	  //choose prev or negated
		   out[0..7]=out1,               //get p.o.i's for zr and ng
		   out[8..15]=out2,
		   out[15]=msb);    

	//set zr and ng
	Or8Way(in=out1, out=zr1);		   //using Or8Way to work with 1-bit outputs
	Or8Way(in=out2, out=zr2);
	Or(a=zr1, b=zr2, out=orzr);                //Or the Ors
	Not(in=orzr, out=zr);			  //have to negate the result so 1 maps to array of zeros 
	
	And(a=msb, b=true, out=ng);            //check if MSB is 1 (i.e. negative)
}